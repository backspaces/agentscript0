// Generated by CoffeeScript 1.5.0
(function() {
  var XY, pt, s, u, _base, _i, _len, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.ABM = {};

  ABM.root = this;

  (function() {
    var vendor, _i, _len, _ref;
    this.requestAnimFrame = this.requestAnimationFrame || null;
    _ref = ['ms', 'moz', 'webkit', 'o'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      vendor = _ref[_i];
      this.requestAnimFrame || (this.requestAnimFrame = this[vendor + 'RequestAnimationFrame']);
    }
    return this.requestAnimFrame || (this.requestAnimFrame = function(callback) {
      return window.setTimeout(callback, 1000 / 60);
    });
  })();

  (_base = Array.prototype).indexOf || (_base.indexOf = function(item) {
    var i, x, _i, _len;
    for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
      x = this[i];
      if (x === item) {
        return i;
      }
    }
    return -1;
  });

  ABM.util = {
    error: function(s) {
      throw new Error(s);
    },
    isArray: Array.isArray || function(obj) {
      return !!(obj && obj.concat && obj.unshift && !obj.callee);
    },
    isFunction: function(obj) {
      return !!(obj && obj.constructor && obj.call && obj.apply);
    },
    isString: function(obj) {
      return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));
    },
    randomInt: function(max) {
      return Math.floor(Math.random() * max);
    },
    randomInt2: function(min, max) {
      return min + Math.floor(Math.random() * (max - min));
    },
    randomFloat: function(max) {
      return Math.random() * max;
    },
    randomFloat2: function(min, max) {
      return min + Math.random() * (max - min);
    },
    randomCentered: function(r) {
      return this.randomFloat2(-r / 2, r / 2);
    },
    log10: function(n) {
      return Math.log(n) / Math.LN10;
    },
    logN: function(n, base) {
      return Math.log(n) / Math.log(base);
    },
    ln: function(n) {
      return Math.log(n);
    },
    mod: function(v, n) {
      return ((v % n) + n) % n;
    },
    wrap: function(v, min, max) {
      return min + this.mod(v - min, max - min);
    },
    clamp: function(v, min, max) {
      return Math.max(Math.min(v, max), min);
    },
    sign: function(v) {
      return (v < 0 ? -1 : 1);
    },
    aToFixed: function(a, p, s) {
      var i;
      if (p == null) {
        p = 2;
      }
      if (s == null) {
        s = ", ";
      }
      return "[" + (((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = a.length; _i < _len; _i++) {
          i = a[_i];
          _results.push(i.toFixed(p));
        }
        return _results;
      })()).join(s)) + "]";
    },
    randomColor: function(color) {
      var i, _i;
      if (color == null) {
        color = [];
      }
      for (i = _i = 0; _i <= 2; i = ++_i) {
        color[i] = this.randomInt(256);
      }
      return color;
    },
    randomGray: function(color, min, max) {
      var i, r, _i;
      if (color == null) {
        color = [];
      }
      if (min == null) {
        min = 64;
      }
      if (max == null) {
        max = 192;
      }
      r = this.randomInt2(min, max);
      for (i = _i = 0; _i <= 2; i = ++_i) {
        color[i] = r;
      }
      return color;
    },
    scaleColor: function(max, s, color) {
      var c, i, _i, _len;
      if (color == null) {
        color = [];
      }
      for (i = _i = 0, _len = max.length; _i < _len; i = ++_i) {
        c = max[i];
        color[i] = this.clamp(Math.round(c * s), 0, 255);
      }
      return color;
    },
    colorStr: function(c) {
      if (c.length === 3) {
        return "rgb(" + c + ")";
      } else {
        return "rgba(" + c + ")";
      }
    },
    colorsEqual: function(c1, c2) {
      return c1.toString() === c2.toString();
    },
    isLittleEndian: function() {
      var d32, d8;
      d8 = new Uint8ClampedArray(4);
      d32 = new Uint32Array(d8.buffer);
      d32[0] = 0x01020304;
      return d8[0] === 4;
    },
    degToRad: function(degrees) {
      return degrees * Math.PI / 180;
    },
    radToDeg: function(radians) {
      return radians * 180 / Math.PI;
    },
    subtractRads: function(rad1, rad2) {
      var PI, dr;
      dr = rad1 - rad2;
      PI = Math.PI;
      if (dr <= -PI) {
        dr += 2 * PI;
      }
      if (dr > PI) {
        dr -= 2 * PI;
      }
      return dr;
    },
    any: function(array) {
      return array.length !== 0;
    },
    empty: function(array) {
      return array.length === 0;
    },
    clone: function(array) {
      return array.slice(0);
    },
    last: function(array) {
      if (this.empty(array)) {
        this.error("last: empty array");
      }
      return array[array.length - 1];
    },
    oneOf: function(array) {
      if (this.empty(array)) {
        this.error("oneOf: empty array");
      }
      return array[this.randomInt(array.length)];
    },
    nOf: function(array, n) {
      var o, r;
      if (n > array.length) {
        this.error("nOf: n > length");
      }
      r = [];
      while (r.length < n) {
        o = this.oneOf(array);
        if (__indexOf.call(r, o) < 0) {
          r.push(o);
        }
      }
      return r;
    },
    removeItem: function(array, item) {
      var i;
      if ((i = array.indexOf(item)) !== -1) {
        array.splice(i, 1);
      }
      if (i < 0) {
        this.error("removeItem: item not found");
      }
      return i;
    },
    shuffle: function(array) {
      return array.sort(function() {
        return 0.5 - Math.random();
      });
    },
    minOneOf: function(array, f, valueToo) {
      var a, o, r, r1, s, _i, _len;
      if (valueToo == null) {
        valueToo = false;
      }
      if (this.empty(array)) {
        this.error("minOneOf: empty array");
      }
      r = Infinity;
      o = null;
      if (this.isString(f)) {
        s = f;
        f = (function(o) {
          return o[s];
        });
      }
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        a = array[_i];
        if ((r1 = f(a)) < r) {
          r = r1;
          o = a;
        }
      }
      if (valueToo) {
        return [o, r];
      } else {
        return o;
      }
    },
    maxOneOf: function(array, f, valueToo) {
      var a, o, r, r1, s, _i, _len;
      if (valueToo == null) {
        valueToo = false;
      }
      if (this.empty(array)) {
        this.error("maxOneOf: empty array");
      }
      r = -Infinity;
      o = null;
      if (this.isString(f)) {
        s = f;
        f = (function(o) {
          return o[s];
        });
      }
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        a = array[_i];
        if ((r1 = f(a)) > r) {
          r = r1;
          o = a;
        }
      }
      if (valueToo) {
        return [o, r];
      } else {
        return o;
      }
    },
    histOf: function(array, bin, f) {
      var a, i, r, ri, s, val, _i, _j, _len, _len1;
      r = [];
      if (this.isString(f)) {
        s = f;
        f = (function(o) {
          return o[s];
        });
      }
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        a = array[_i];
        i = Math.floor(f(a) / bin);
        r[i] = (ri = r[i]) != null ? ri + 1 : 1;
      }
      for (i = _j = 0, _len1 = r.length; _j < _len1; i = ++_j) {
        val = r[i];
        if (val == null) {
          r[i] = 0;
        }
      }
      return r;
    },
    sortBy: function(array, prop) {
      return array.sort(function(a, b) {
        return a[prop] - b[prop];
      });
    },
    uniq: function(array) {
      var i, _i, _ref;
      for (i = _i = _ref = array.length - 1; _i >= 1; i = _i += -1) {
        if (array[i - 1] === array[i]) {
          array.splice(i, 1);
        }
      }
      return array;
    },
    flatten: function(matrix) {
      return matrix.reduce(function(a, b) {
        return a.concat(b);
      });
    },
    binarySearch: function(items, value, fcn) {
      var pivot, pivotVal, start, stop;
      if (fcn == null) {
        fcn = function(ex) {
          return ex;
        };
      }
      start = 0;
      stop = items.length - 1;
      pivot = Math.floor((start + stop) / 2);
      while ((pivotVal = fcn(items[pivot])) !== value && start < stop) {
        if (value < pivotVal) {
          stop = pivot - 1;
        }
        if (value > pivotVal) {
          start = pivot + 1;
        }
        pivot = Math.floor((stop + start) / 2);
      }
      if (fcn(items[pivot]) === value) {
        return pivot;
      } else {
        return -1;
      }
    },
    aMax: function(array) {
      return Math.max.apply(Math, array);
    },
    aMin: function(array) {
      return Math.min.apply(Math, array);
    },
    aPush: function(array, a) {
      return array.push.apply(array, a);
    },
    radsToward: function(x1, y1, x2, y2) {
      var PI, dx, dy;
      PI = Math.PI;
      dx = x2 - x1;
      dy = y2 - y1;
      if (dx === 0) {
        if (dy < 0) {
          return 3 * PI / 2;
        }
        if (dy > 0) {
          return PI / 2;
        }
        return 0;
      } else {
        return Math.atan(dy / dx) + (dx < 0 ? PI : 0);
      }
    },
    inCone: function(heading, cone, radius, x1, y1, x2, y2) {
      var angle12;
      if (radius < this.distance(x1, y1, x2, y2)) {
        return false;
      }
      angle12 = this.radsToward(x1, y1, x2, y2);
      return cone / 2 >= Math.abs(this.subtractRads(heading, angle12));
    },
    distance: function(x1, y1, x2, y2) {
      var dx, dy;
      dx = x1 - x2;
      dy = y1 - y2;
      return Math.sqrt(dx * dx + dy * dy);
    },
    sqDistance: function(x1, y1, x2, y2) {
      var dx, dy;
      dx = x1 - x2;
      dy = y1 - y2;
      return dx * dx + dy * dy;
    },
    torusDistance: function(x1, y1, x2, y2, w, h) {
      return Math.sqrt(this.torusSqDistance(x1, y1, x2, y2, w, h));
    },
    torusSqDistance: function(x1, y1, x2, y2, w, h) {
      var dx, dxMin, dy, dyMin;
      dx = Math.abs(x2 - x1);
      dy = Math.abs(y2 - y1);
      dxMin = Math.min(dx, w - dx);
      dyMin = Math.min(dy, h - dy);
      return dxMin * dxMin + dyMin * dyMin;
    },
    torusWraps: function(x1, y1, x2, y2, w, h) {
      var dx, dy;
      dx = Math.abs(x2 - x1);
      dy = Math.abs(y2 - y1);
      return dx > w - dx || dy > h - dy;
    },
    torus4Pts: function(x1, y1, x2, y2, w, h) {
      var x2r, y2r;
      x2r = x2 < x1 ? x2 + w : x2 - w;
      y2r = y2 < y1 ? y2 + h : y2 - h;
      return [[x2, y2], [x2r, y2], [x2, y2r], [x2r, y2r]];
    },
    torusPt: function(x1, y1, x2, y2, w, h) {
      var x, x2r, y, y2r;
      x2r = x2 < x1 ? x2 + w : x2 - w;
      y2r = y2 < y1 ? y2 + h : y2 - h;
      x = Math.abs(x2r - x1) < Math.abs(x2 - x1) ? x2r : x2;
      y = Math.abs(y2r - y1) < Math.abs(y2 - y1) ? y2r : y2;
      return [x, y];
    },
    torusRadsToward: function(x1, y1, x2, y2, w, h) {
      var _ref;
      _ref = this.torusPt(x1, y1, x2, y2, w, h), x2 = _ref[0], y2 = _ref[1];
      return this.radsToward(x1, y1, x2, y2);
    },
    inTorusCone: function(heading, cone, radius, x1, y1, x2, y2, w, h) {
      var p, _i, _len, _ref;
      _ref = this.torus4Pts(x1, y1, x2, y2, w, h);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        if (this.inCone(heading, cone, radius, x1, y1, p[0], p[1])) {
          return true;
        }
      }
      return false;
    },
    createLayer: function(div, width, height, z, ctx) {
      var can;
      if (ctx == null) {
        ctx = "2d";
      }
      can = document.createElement('canvas');
      can.setAttribute('style', "position:absolute;top:0;left:0;z-index:" + z);
      can.width = width;
      can.height = height;
      can.ctx = ctx === "2d" ? can.getContext("2d") : can.getContext("webgl") || can.getContext("experimental-webgl");
      document.getElementById(div).appendChild(can);
      return can.ctx;
    },
    clearCtx: function(ctx) {
      if (ctx.save != null) {
        ctx.save();
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        return ctx.restore();
      } else {
        ctx.clearColor(0, 0, 0, 0);
        return ctx.clear(ctx.COLOR_BUFFER_BIT | ctx.DEPTH_BUFFER_BIT);
      }
    },
    fillCtx: function(ctx, color) {
      if (ctx.fillStyle != null) {
        ctx.save();
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.fillStyle = this.colorStr(color);
        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        ctx.restore();
        return console.log("fillCtx: 2d");
      } else {
        console.log("fillCtx: 2d");
        ctx.clearColor.apply(ctx, __slice.call(color).concat([1]));
        return ctx.clear(ctx.COLOR_BUFFER_BIT | ctx.DEPTH_BUFFER_BIT);
      }
    },
    ctxDrawText: function(ctx, string, xy, color) {
      if (color == null) {
        color = [0, 0, 0];
      }
      ctx.fillStyle = this.colorStr(color);
      return ctx.fillText(string, xy[0], xy[1]);
    },
    ctxTextParams: function(ctx, font, align, baseline) {
      if (align == null) {
        align = "center";
      }
      if (baseline == null) {
        baseline = "middle";
      }
      ctx.font = font;
      ctx.textAlign = align;
      return ctx.textBaseline = baseline;
    },
    ctxLabelParams: function(ctx, color, xy) {
      ctx.labelColor = color;
      return ctx.labelXY = xy;
    },
    importImage: function(imageSrc, f) {
      var img;
      if (f == null) {
        f = function(img) {};
      }
      img = new Image();
      img.onload = function() {
        return f(img);
      };
      img.src = imageSrc;
      return img;
    },
    imageToCtx: function(image) {
      var canvas, ctx;
      canvas = document.createElement("canvas");
      canvas.width = image.width;
      canvas.height = image.height;
      ctx = canvas.getContext("2d");
      ctx.drawImage(image, 0, 0);
      return ctx;
    },
    ctxToImage: function(ctx) {
      var image;
      image = new Image();
      image.src = ctx.canvas.toDataURL("image/png");
      return image;
    },
    ctxToImageData: function(ctx) {
      return ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
    },
    canvasToImage: function(canvas) {
      return ctxToImage(canvas.getContext("2d"));
    },
    canvasToImageData: function(canvas) {
      return ctxToImageData(canvas.getContext("2d"));
    },
    imageToCanvas: function(image) {
      return imageToCtx(image).canvas;
    },
    drawCenteredImage: function(ctx, img, rad, x, y, dx, dy) {
      ctx.translate(x, y);
      ctx.rotate(rad);
      return ctx.drawImage(img, -dx / 2, -dy / 2);
    }
  };

  u = ABM.util;

  ABM.shapes = s = {
    "default": {
      rotate: true,
      draw: function(c) {
        return s.poly(c, [[.5, 0], [-.5, -.5], [-.25, 0], [-.5, .5]]);
      }
    },
    triangle: {
      rotate: true,
      draw: function(c) {
        return s.poly(c, [[.5, 0], [-.5, -.4], [-.5, .4]]);
      }
    },
    arrow: {
      rotate: true,
      draw: function(c) {
        return s.poly(c, [[.5, 0], [0, .5], [0, .2], [-.5, .2], [-.5, -.2], [0, -.2], [0, -.5]]);
      }
    },
    bug: {
      rotate: true,
      draw: function(c) {
        var PI;
        PI = Math.PI;
        c.strokeStyle = c.fillStyle;
        c.lineWidth = .05;
        c.moveTo(.4, .225);
        c.lineTo(.2, 0);
        c.lineTo(.4, -.225);
        c.stroke();
        c.beginPath();
        c.arc(.12, 0, .13, 0, 2 * PI);
        c.arc(-.05, 0, .13, 0, 2 * PI);
        return c.arc(-.27, 0, .2, 0, 2 * PI);
      }
    },
    pyramid: {
      rotate: false,
      draw: function(c) {
        return s.poly(c, [[0, .5], [-.433, -.25], [.433, -.25]]);
      }
    },
    circle: {
      rotate: false,
      draw: function(c) {
        return c.arc(0, 0, .5, 0, 2 * Math.PI);
      }
    },
    square: {
      rotate: false,
      draw: function(c) {
        return c.fillRect(-.5, -.5, 1, 1);
      }
    },
    pentagon: {
      rotate: false,
      draw: function(c) {
        return s.poly(c, [[0, .45], [-.45, .1], [-.3, -.45], [.3, -.45], [.45, .1]]);
      }
    },
    ring: {
      rotate: false,
      draw: function(c) {
        c.arc(0, 0, .5, 0, 2 * Math.PI, true);
        c.closePath();
        return c.arc(0, 0, .3, 0, 2 * Math.PI, false);
      }
    },
    person: {
      rotate: false,
      draw: function(c) {
        s.poly(c, [[.15, .2], [.3, 0], [.125, -.1], [.125, .05], [.1, -.15], [.25, -.5], [.05, -.5], [0, -.25], [-.05, -.5], [-.25, -.5], [-.1, -.15], [-.125, .05], [-.125, -.1], [-.3, 0], [-.15, .2]]);
        c.closePath();
        return c.arc(0, .35, .15, 0, 2 * Math.PI);
      }
    },
    names: function() {
      var name, val, _results;
      _results = [];
      for (name in this) {
        if (!__hasProp.call(this, name)) continue;
        val = this[name];
        if (!ABM.util.isFunction(val)) {
          _results.push(name);
        }
      }
      return _results;
    },
    add: function(name, rotate, draw) {
      return this[name] = {
        rotate: rotate,
        draw: draw
      };
    },
    poly: function(c, a) {
      var i, p, _i, _len;
      for (i = _i = 0, _len = a.length; _i < _len; i = ++_i) {
        p = a[i];
        if (i === 0) {
          c.moveTo(p[0], p[1]);
        } else {
          c.lineTo(p[0], p[1]);
        }
      }
      return null;
    },
    shapeToCtx: function(name, color, scale) {
      var can, ctx, shape;
      shape = this[name];
      can = document.createElement('canvas');
      can.width = can.height = scale;
      ctx = can.getContext("2d");
      ctx.scale(scale, scale);
      ctx.translate(.5, .5);
      ctx.fillStyle = u.colorStr(color);
      ctx.beginPath();
      shape.draw(ctx);
      ctx.closePath();
      ctx.fill();
      return ctx;
    }
  };

  u = ABM.util;

  ABM.AgentSet = (function(_super) {

    __extends(AgentSet, _super);

    AgentSet.asSet = function(a, setType) {
      var _ref;
      if (setType == null) {
        setType = ABM.AgentSet;
      }
      a.__proto__ = (_ref = setType.prototype) != null ? _ref : setType.constructor.prototype;
      return a;
    };

    function AgentSet() {
      AgentSet.__super__.constructor.call(this);
      this.ID = 0;
    }

    AgentSet.prototype.add = function(o) {
      o.id = this.ID++;
      this.push(o);
      return o;
    };

    AgentSet.prototype.remove = function(o) {
      var i;
      if (o === this.last()) {
        this.length--;
      } else {
        if ((i = this.indexOfID(o.id)) !== -1) {
          this.splice(i, 1);
        }
        if (i === -1) {
          u.error("remove: indexOfID not in list");
        }
      }
      return this;
    };

    AgentSet.prototype.uniq = function() {
      return u.uniq(this);
    };

    AgentSet.prototype.withID = function(id) {
      var i;
      if ((i = this.indexOfID(id)) !== -1) {
        return this[i];
      } else {
        return null;
      }
    };

    AgentSet.prototype.indexOfID = function(id, sorted) {
      if (sorted == null) {
        sorted = true;
      }
      if (!sorted) {
        this.sortById();
      }
      if (id === this.last().id) {
        return this.length - 1;
      }
      return u.binarySearch(this, id, function(o) {
        return o.id;
      });
    };

    AgentSet.prototype.asSet = function(a) {
      return ABM.AgentSet.asSet(a);
    };

    AgentSet.prototype.asOrderedSet = function(a) {
      return this.asSet(a).sortById();
    };

    AgentSet.prototype.toString = function() {
      var a;
      return "[" + ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          a = this[_i];
          _results.push(a.toString());
        }
        return _results;
      }).call(this)).join(", ") + "]";
    };

    AgentSet.prototype.getProp = function(prop) {
      var o, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        o = this[_i];
        _results.push(o[prop]);
      }
      return _results;
    };

    AgentSet.prototype.getProps = function(props) {
      var o, p, _i, _len, _results;
      if (u.isString(props)) {
        props = props.split(" ");
      }
      _results = [];
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        o = this[_i];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = props.length; _j < _len1; _j++) {
            p = props[_j];
            _results1.push(o[p]);
          }
          return _results1;
        })());
      }
      return _results;
    };

    AgentSet.prototype.getWithProp = function(prop, value) {
      var o;
      return this.asSet((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          o = this[_i];
          if (o[prop] === value) {
            _results.push(o);
          }
        }
        return _results;
      }).call(this));
    };

    AgentSet.prototype.setProp = function(prop, value) {
      var o, _i, _len;
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        o = this[_i];
        o[prop] = value;
      }
      return this;
    };

    AgentSet.prototype.maxProp = function(prop) {
      return Math.max.apply(Math, this.getProp(prop));
    };

    AgentSet.prototype.minProp = function(prop) {
      return Math.min.apply(Math, this.getProp(prop));
    };

    AgentSet.prototype.shuffle = function() {
      return u.shuffle(this);
    };

    AgentSet.prototype.sortById = function() {
      return u.sortBy(this, "id");
    };

    AgentSet.prototype.clone = function() {
      return this.asSet(u.clone(this));
    };

    AgentSet.prototype.last = function() {
      return u.last(this);
    };

    AgentSet.prototype.any = function() {
      return u.any(this);
    };

    AgentSet.prototype.other = function(a) {
      var o;
      return this.asSet((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          o = this[_i];
          if (o !== a) {
            _results.push(o);
          }
        }
        return _results;
      }).call(this));
    };

    AgentSet.prototype.oneOf = function() {
      return u.oneOf(this);
    };

    AgentSet.prototype.nOf = function(n) {
      return this.asSet(u.nOf(this, n));
    };

    AgentSet.prototype.minOneOf = function(f, valueToo) {
      if (valueToo == null) {
        valueToo = false;
      }
      return u.minOneOf(this, f, valueToo);
    };

    AgentSet.prototype.maxOneOf = function(f, valueToo) {
      if (valueToo == null) {
        valueToo = false;
      }
      return u.maxOneOf(this, f, valueToo);
    };

    AgentSet.prototype.draw = function(ctx) {
      var o, _i, _len;
      u.clearCtx(ctx);
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        o = this[_i];
        if (!o.hidden) {
          o.draw(ctx);
        }
      }
      return null;
    };

    AgentSet.prototype.inRadius = function(o, d, meToo) {
      var a, d2, h, w, x, y;
      if (meToo == null) {
        meToo = false;
      }
      d2 = d * d;
      x = o.x;
      y = o.y;
      if (ABM.patches.isTorus) {
        w = ABM.patches.numX;
        h = ABM.patches.numY;
        return this.asSet((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = this.length; _i < _len; _i++) {
            a = this[_i];
            if (u.torusSqDistance(x, y, a.x, a.y, w, h) <= d2 && (meToo || a !== o)) {
              _results.push(a);
            }
          }
          return _results;
        }).call(this));
      } else {
        return this.asSet((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = this.length; _i < _len; _i++) {
            a = this[_i];
            if (u.sqDistance(x, y, a.x, a.y) <= d2 && (meToo || a !== o)) {
              _results.push(a);
            }
          }
          return _results;
        }).call(this));
      }
    };

    AgentSet.prototype.inCone = function(o, heading, cone, radius, meToo) {
      var a, h, rSet, w, x, y;
      if (meToo == null) {
        meToo = false;
      }
      rSet = this.inRadius(o, radius, meToo);
      x = o.x;
      y = o.y;
      if (ABM.patches.isTorus) {
        w = ABM.patches.numX;
        h = ABM.patches.numY;
        return this.asSet((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = rSet.length; _i < _len; _i++) {
            a = rSet[_i];
            if ((a === o && meToo) || u.inTorusCone(heading, cone, radius, x, y, a.x, a.y, w, h)) {
              _results.push(a);
            }
          }
          return _results;
        })());
      } else {
        return this.asSet((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = rSet.length; _i < _len; _i++) {
            a = rSet[_i];
            if ((a === o && meToo) || u.inCone(heading, cone, radius, x, y, a.x, a.y)) {
              _results.push(a);
            }
          }
          return _results;
        })());
      }
    };

    AgentSet.prototype.ask = function(f) {
      var o, _i, _len;
      if (u.isString(f)) {
        eval("f=function(o){return " + f + ";}");
      }
      for (_i = 0, _len = this.length; _i < _len; _i++) {
        o = this[_i];
        f(o);
      }
      return this;
    };

    AgentSet.prototype["with"] = function(f) {
      var o;
      if (u.isString(f)) {
        eval("f=function(o){return " + f + ";}");
      }
      return this.asSet((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          o = this[_i];
          if (f(o)) {
            _results.push(o);
          }
        }
        return _results;
      }).call(this));
    };

    return AgentSet;

  })(Array);

  XY = (function() {

    function XY(x, y) {
      this.x = x;
      this.y = y;
    }

    XY.prototype.toString = function() {
      return "{id:" + this.id + ",x:" + this.x + ",y:" + this.y + "}";
    };

    return XY;

  })();

  this.AS = new ABM.AgentSet;

  _ref = [[0, 1], [8, 0], [6, 4], [1, 3], [1, 1]];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    pt = _ref[_i];
    AS.add((function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(XY, pt, function(){}));
  }

  u = ABM.util;

  ABM.Patch = (function() {

    Patch.prototype.n = null;

    Patch.prototype.n4 = null;

    Patch.prototype.cachedRects = null;

    Patch.prototype.color = [0, 0, 0];

    Patch.prototype.hidden = false;

    function Patch(x, y) {
      this.x = x;
      this.y = y;
    }

    Patch.prototype.toString = function() {
      return "{id:" + this.id + " xy:" + (u.aToFixed([this.x, this.y])) + " c:" + this.color + "}";
    };

    Patch.prototype.scaleColor = function(c, s) {
      if (!this.hasOwnProperty("color")) {
        this.color = u.clone(this.color);
      }
      return u.scaleColor(c, s, this.color);
    };

    Patch.prototype.draw = function(ctx) {
      var x, y, _ref1;
      ctx.fillStyle = u.colorStr(this.color);
      ctx.fillRect(this.x - .5, this.y - .5, 1, 1);
      if (this.label != null) {
        _ref1 = ctx.labelXY, x = _ref1[0], y = _ref1[1];
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.scale(1 / ABM.patches.size, -1 / ABM.patches.size);
        u.ctxDrawText(ctx, this.label, [x, y], ctx.labelColor);
        return ctx.restore();
      }
    };

    Patch.prototype.agentsHere = function() {
      var a, _ref1;
      return (_ref1 = this.agents) != null ? _ref1 : (function() {
        var _j, _len1, _ref2, _results;
        _ref2 = ABM.agents;
        _results = [];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          a = _ref2[_j];
          if (a.p === this) {
            _results.push(a);
          }
        }
        return _results;
      }).call(this);
    };

    Patch.prototype.isOnEdge = function() {
      return this.x === ABM.patches.minX || this.x === ABM.patches.maxX || this.y === ABM.patches.minY || this.y === ABM.patches.maxY;
    };

    Patch.prototype.sprout = function(num, init) {
      var _this = this;
      if (num == null) {
        num = 1;
      }
      if (init == null) {
        init = function() {};
      }
      return ABM.agents.create(num, function(a) {
        a.setXY(_this.x, _this.y);
        init(a);
        return a;
      });
    };

    return Patch;

  })();

  ABM.Patches = (function(_super) {

    __extends(Patches, _super);

    function Patches(size, minX, maxX, minY, maxY, isTorus, neighbors) {
      var x, y, _j, _k;
      this.size = size;
      this.minX = minX;
      this.maxX = maxX;
      this.minY = minY;
      this.maxY = maxY;
      this.isTorus = isTorus != null ? isTorus : true;
      if (neighbors == null) {
        neighbors = true;
      }
      Patches.__super__.constructor.call(this);
      this.numX = this.maxX - this.minX + 1;
      this.numY = this.maxY - this.minY + 1;
      for (y = _j = minY; _j <= maxY; y = _j += 1) {
        for (x = _k = minX; _k <= maxX; x = _k += 1) {
          this.add(new ABM.Patch(x, y));
        }
      }
      if (neighbors) {
        this.setNeighbors();
      }
      this.setPixels();
      this.drawWithPixels = this.size === 1;
    }

    Patches.prototype.setNeighbors = function() {
      var n, p, _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = this.length; _j < _len1; _j++) {
        p = this[_j];
        p.n = this.patchRect(p, 1, 1);
        _results.push(p.n4 = this.asSet((function() {
          var _k, _len2, _ref1, _results1;
          _ref1 = p.n;
          _results1 = [];
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            n = _ref1[_k];
            if (n.x === p.x || n.y === p.y) {
              _results1.push(n);
            }
          }
          return _results1;
        })()));
      }
      return _results;
    };

    Patches.prototype.setPixels = function() {
      var can;
      if (this.size === 1) {
        this.pixelsCtx = ABM.contexts.patches;
      } else {
        can = document.createElement('canvas');
        can.width = this.numX;
        can.height = this.numY;
        this.pixelsCtx = can.getContext("2d");
      }
      this.pixelsImageData = this.pixelsCtx.getImageData(0, 0, this.numX, this.numY);
      this.pixelsData = this.pixelsImageData.data;
      if (this.pixelsData instanceof Uint8Array) {
        this.pixelsData32 = new Uint32Array(this.pixelsData.buffer);
        return this.pixelsAreLittleEndian = u.isLittleEndian();
      }
    };

    Patches.prototype.draw = function(ctx) {
      if (this.drawWithPixels) {
        return this.drawScaledPixels(ctx);
      } else {
        return Patches.__super__.draw.call(this, ctx);
      }
    };

    Patches.prototype.setDefaultColor = function(color) {
      return ABM.Patch.prototype.color = color;
    };

    Patches.prototype.patchXY = function(x, y) {
      return this[x - this.minX + this.numX * (y - this.minY)];
    };

    Patches.prototype.clamp = function(x, y) {
      return [u.clamp(x, this.minX - .5, this.maxX + .5), u.clamp(y, this.minY - .5, this.maxY + .5)];
    };

    Patches.prototype.wrap = function(x, y) {
      return [u.wrap(x, this.minX - .5, this.maxX + .5), u.wrap(y, this.minY - .5, this.maxY + .5)];
    };

    Patches.prototype.coord = function(x, y) {
      if (this.isTorus) {
        return this.wrap(x, y);
      } else {
        return this.clamp(x, y);
      }
    };

    Patches.prototype.patch = function(x, y) {
      var _ref1;
      _ref1 = this.coord(x, y), x = _ref1[0], y = _ref1[1];
      x = u.clamp(Math.round(x), this.minX, this.maxX);
      y = u.clamp(Math.round(y), this.minY, this.maxY);
      return this.patchXY(x, y);
    };

    Patches.prototype.randomPt = function() {
      return [u.randomFloat2(this.minX - .5, this.maxX + .5), u.randomFloat2(this.minY - .5, this.maxY + .5)];
    };

    Patches.prototype.bitWidth = function() {
      return this.numX * this.size;
    };

    Patches.prototype.bitHeight = function() {
      return this.numY * this.size;
    };

    Patches.prototype.patches2Bits = function(p) {
      return p * this.size;
    };

    Patches.prototype.bits2Patches = function(b) {
      return b / this.size;
    };

    Patches.prototype.patchRect = function(p, dx, dy, meToo) {
      var pnext, rect, x, y, _j, _k, _ref1, _ref2, _ref3, _ref4;
      if (meToo == null) {
        meToo = false;
      }
      if ((p.pRect != null) && p.pRect.radius === dx && p.pRect.radius === dy) {
        return p.pRect;
      }
      rect = [];
      for (y = _j = _ref1 = p.y - dy, _ref2 = p.y + dy; _j <= _ref2; y = _j += 1) {
        for (x = _k = _ref3 = p.x - dx, _ref4 = p.x + dx; _k <= _ref4; x = _k += 1) {
          if (this.isTorus || ((this.minX <= x && x <= this.maxX) && (this.minY <= y && y <= this.maxY))) {
            if (this.isTorus) {
              if (x < this.minX) {
                x += this.numX;
              }
              if (x > this.maxX) {
                x -= this.numX;
              }
              if (y < this.minY) {
                y += this.numY;
              }
              if (y > this.maxY) {
                y -= this.numY;
              }
            }
            pnext = this.patchXY(x, y);
            if (pnext == null) {
              u.error("patchRect: x,y out of bounds, see console.log");
              console.log("  x " + x + " y " + y + " p.x " + p.x + " p.y " + p.y + " dx " + dx + " dy " + dy + " minX " + this.minX + " minY " + this.minY);
            }
            if (meToo || p !== pnext) {
              rect.push(pnext);
            }
          }
        }
      }
      return this.asSet(rect);
    };

    Patches.prototype.importDrawing = function(imageSrc) {
      return u.importImage(imageSrc, function(img) {
        var ctx;
        ctx = ABM.drawing;
        ctx.save();
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.drawImage(img, 0, 0, ctx.canvas.width, ctx.canvas.height);
        return ctx.restore();
      });
    };

    Patches.prototype.pixelIndex = function(p) {
      return ((p.x - this.minX) + (this.maxY - p.y) * this.numX) * 4;
    };

    Patches.prototype.importColors = function(imageSrc) {
      var _this = this;
      return u.importImage(imageSrc, function(img) {
        var data, i, j, p, _j, _len1;
        if (img.width !== _this.numX || img.height !== _this.numY) {
          _this.pixelsCtx.drawImage(img, 0, 0, _this.numX, _this.numY);
        } else {
          _this.pixelsCtx.drawImage(img, 0, 0);
        }
        data = _this.pixelsCtx.getImageData(0, 0, _this.numX, _this.numY).data;
        for (_j = 0, _len1 = _this.length; _j < _len1; _j++) {
          p = _this[_j];
          i = _this.pixelIndex(p);
          p.color = (function() {
            var _k, _results;
            _results = [];
            for (j = _k = 0; _k <= 2; j = ++_k) {
              _results.push(data[i + j]);
            }
            return _results;
          })();
        }
        return null;
      });
    };

    Patches.prototype.drawScaledPixels = function(ctx) {
      if (this.pixelsData32 != null) {
        return this.drawScaledPixels32(ctx);
      } else {
        return this.drawScaledPixels8(ctx);
      }
    };

    Patches.prototype.drawScaledPixels8 = function(ctx) {
      var c, data, i, j, maxY, minX, numX, p, _j, _k, _len1;
      data = this.pixelsData;
      minX = this.minX;
      numX = this.numX;
      maxY = this.maxY;
      for (_j = 0, _len1 = this.length; _j < _len1; _j++) {
        p = this[_j];
        i = ((p.x - minX) + (maxY - p.y) * numX) * 4;
        c = p.color;
        for (j = _k = 0; _k <= 2; j = ++_k) {
          data[i + j] = c[j];
        }
        data[i + 3] = c.length === 4 ? c[3] : 255;
      }
      this.pixelsCtx.putImageData(this.pixelsImageData, 0, 0);
      if (this.size === 1) {
        return;
      }
      return ctx.drawImage(this.pixelsCtx.canvas, 0, 0, ctx.canvas.width, ctx.canvas.height);
    };

    Patches.prototype.drawScaledPixels32 = function(ctx) {
      var a, c, data, i, maxY, minX, numX, p, _j, _len1;
      data = this.pixelsData32;
      minX = this.minX;
      numX = this.numX;
      maxY = this.maxY;
      for (_j = 0, _len1 = this.length; _j < _len1; _j++) {
        p = this[_j];
        i = (p.x - minX) + (maxY - p.y) * numX;
        c = p.color;
        a = c.length === 4 ? c[3] : 255;
        if (this.pixelsAreLittleEndian) {
          data[i] = (a << 24) | (c[2] << 16) | (c[1] << 8) | c[0];
        } else {
          data[i] = (c[0] << 24) | (c[1] << 16) | (c[2] << 8) | a;
        }
      }
      this.pixelsCtx.putImageData(this.pixelsImageData, 0, 0);
      if (this.size === 1) {
        return;
      }
      return ctx.drawImage(this.pixelsCtx.canvas, 0, 0, ctx.canvas.width, ctx.canvas.height);
    };

    Patches.prototype.diffuse = function(v, rate, c) {
      var dv, dv8, n, nn, p, _j, _k, _l, _len1, _len2, _len3, _len4, _m, _ref1;
      if (c == null) {
        c = null;
      }
      if (this[0]._diffuseNext == null) {
        for (_j = 0, _len1 = this.length; _j < _len1; _j++) {
          p = this[_j];
          p._diffuseNext = 0;
        }
      }
      for (_k = 0, _len2 = this.length; _k < _len2; _k++) {
        p = this[_k];
        dv = p[v] * rate;
        dv8 = dv / 8;
        nn = p.n.length;
        p._diffuseNext += p[v] - dv + (8 - nn) * dv8;
        _ref1 = p.n;
        for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
          n = _ref1[_l];
          n._diffuseNext += dv8;
        }
      }
      for (_m = 0, _len4 = this.length; _m < _len4; _m++) {
        p = this[_m];
        p[v] = p._diffuseNext;
        p._diffuseNext = 0;
        if (c) {
          p.scaleColor(c, p[v]);
        }
      }
      return null;
    };

    return Patches;

  })(ABM.AgentSet);

  ABM.Agent = (function() {

    Agent.prototype.color = null;

    Agent.prototype.shape = "default";

    Agent.prototype.breed = "default";

    Agent.prototype.hidden = false;

    Agent.prototype.size = 1;

    Agent.prototype.penDown = false;

    Agent.prototype.penSize = 1;

    Agent.prototype.heading = null;

    Agent.prototype.sprite = null;

    Agent.prototype.links = null;

    function Agent() {
      this.x = this.y = 0;
      if (this.color == null) {
        this.color = u.randomColor();
      }
      if (this.heading == null) {
        this.heading = u.randomFloat(Math.PI * 2);
      }
      this.p = ABM.patches.patch(this.x, this.y);
      if (this.p.agents != null) {
        this.p.agents.push(this);
      }
      if (ABM.links.cacheAgentLinks) {
        this.links = [];
      }
    }

    Agent.prototype.scaleColor = function(c, s) {
      if (!this.hasOwnProperty("color")) {
        this.color = u.clone(this.color);
      }
      return u.scaleColor(c, s, this.color);
    };

    Agent.prototype.toString = function() {
      return "{id:" + this.id + " xy:" + (u.aToFixed([this.x, this.y])) + " c:" + this.color + " h: " + (this.heading.toFixed(2)) + "}";
    };

    Agent.prototype.setXY = function(x, y) {
      var drawing, p, x0, y0, _ref1, _ref2;
      if (this.penDown) {
        _ref1 = [this.x, this.y], x0 = _ref1[0], y0 = _ref1[1];
      }
      _ref2 = ABM.patches.coord(x, y), this.x = _ref2[0], this.y = _ref2[1];
      p = this.p;
      this.p = ABM.patches.patch(this.x, this.y);
      if ((p.agents != null) && p !== this.p) {
        u.removeItem(p.agents, this);
        this.p.agents.push(this);
      }
      if (this.penDown) {
        drawing = ABM.drawing;
        drawing.strokeStyle = u.colorStr(this.color);
        drawing.lineWidth = ABM.patches.bits2Patches(this.penSize);
        drawing.beginPath();
        drawing.moveTo(x0, y0);
        drawing.lineTo(x, y);
        return drawing.stroke();
      }
    };

    Agent.prototype.moveTo = function(a) {
      return this.setXY(a.x, a.y);
    };

    Agent.prototype.forward = function(d) {
      return this.setXY(this.x + d * Math.cos(this.heading), this.y + d * Math.sin(this.heading));
    };

    Agent.prototype.rotate = function(rad) {
      return this.heading = u.wrap(this.heading + rad, 0, Math.PI * 2);
    };

    Agent.prototype.draw = function(ctx) {
      var shape;
      shape = ABM.shapes[this.shape];
      ctx.save();
      if (this.sprite != null) {
        ctx.translate(this.x, this.y);
        if (shape.rotate) {
          ctx.rotate(this.heading);
        }
        ctx.scale(1 / ABM.patches.size, -1 / ABM.patches.size);
        ctx.drawImage(this.sprite.canvas, -this.sprite.canvas.width / 2, -this.sprite.canvas.height / 2);
      } else {
        ctx.translate(this.x, this.y);
        ctx.scale(this.size, this.size);
        if (shape.rotate) {
          ctx.rotate(this.heading);
        }
        if (ABM.agents.staticColors && (this.colorStr == null)) {
          this.colorStr = u.colorStr(this.color);
        }
        ctx.fillStyle = this.colorStr || u.colorStr(this.color);
        ctx.beginPath();
        shape.draw(ctx);
        ctx.closePath();
        ctx.fill();
      }
      return ctx.restore();
    };

    Agent.prototype.stamp = function() {
      return this.draw(ABM.drawing);
    };

    Agent.prototype.distanceXY = function(x, y) {
      if (ABM.patches.isTorus) {
        return u.torusDistance(this.x, this.y, x, y, ABM.patches.numX, ABM.patches.numY);
      } else {
        return u.distance(this.x, this.y, x, y);
      }
    };

    Agent.prototype.distance = function(o) {
      return this.distanceXY(o.x, o.y);
    };

    Agent.prototype.torusPtXY = function(x, y) {
      return u.torusPt(this.x, this.y, x, y, ABM.patches.numX, ABM.patches.numY);
    };

    Agent.prototype.torusPt = function(o) {
      return this.torusPtXY(o.x, o.y);
    };

    Agent.prototype.face = function(o) {
      return this.heading = this.towards(o);
    };

    Agent.prototype.towardsXY = function(x, y) {
      if (ABM.patches.isTorus) {
        return u.torusRadsToward(this.x, this.y, x, y, ABM.patches.numX, ABM.patches.numY);
      } else {
        return u.radsToward(this.x, this.y, x, y);
      }
    };

    Agent.prototype.towards = function(o) {
      return this.towardsXY(o.x, o.y);
    };

    Agent.prototype.die = function() {
      var l, _j, _len1, _ref1;
      ABM.agents.remove(this);
      _ref1 = this.myLinks();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        l = _ref1[_j];
        l.die();
      }
      if (this.p.agents != null) {
        u.removeItem(this.p.agents, this);
      }
      return null;
    };

    Agent.prototype.hatch = function(num, init) {
      var _this = this;
      if (num == null) {
        num = 1;
      }
      if (init == null) {
        init = function() {};
      }
      return ABM.agents.create(num, function(a) {
        var k, v;
        a.setXY(_this.x, _this.y);
        for (k in _this) {
          if (!__hasProp.call(_this, k)) continue;
          v = _this[k];
          if (k !== "id") {
            a[k] = v;
          }
        }
        init(a);
        return a;
      });
    };

    Agent.prototype.inCone = function(aset, cone, radius, meToo) {
      if (meToo == null) {
        meToo = false;
      }
      return aset.inCone(this.p, this.heading, cone, radius, meToo);
    };

    Agent.prototype.otherEnd = function(l) {
      if (l.end1 === this) {
        return l.end2;
      } else {
        return l.end1;
      }
    };

    Agent.prototype.myLinks = function() {
      var l, _ref1;
      return (_ref1 = this.links) != null ? _ref1 : (function() {
        var _j, _len1, _ref2, _results;
        _ref2 = ABM.links;
        _results = [];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          l = _ref2[_j];
          if ((l.end1 === this) || (l.end2 === this)) {
            _results.push(l);
          }
        }
        return _results;
      }).call(this);
    };

    Agent.prototype.linkNeighbors = function() {
      var l, _j, _len1, _ref1, _results;
      _ref1 = this.myLinks();
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        l = _ref1[_j];
        _results.push(this.otherEnd(l));
      }
      return _results;
    };

    Agent.prototype.myInLinks = function() {
      var l, _j, _len1, _ref1, _results;
      _ref1 = this.myLinks();
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        l = _ref1[_j];
        if (l.end2 === this) {
          _results.push(l);
        }
      }
      return _results;
    };

    Agent.prototype.inLinkNeighbors = function() {
      var l, _j, _len1, _ref1, _results;
      _ref1 = this.myLinks();
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        l = _ref1[_j];
        if (l.end2 === this) {
          _results.push(l.end1);
        }
      }
      return _results;
    };

    Agent.prototype.myOutLinks = function() {
      var l, _j, _len1, _ref1, _results;
      _ref1 = this.myLinks();
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        l = _ref1[_j];
        if (l.end1 === this) {
          _results.push(l);
        }
      }
      return _results;
    };

    Agent.prototype.outLinkNeighbors = function() {
      var l, _j, _len1, _ref1, _results;
      _ref1 = this.myLinks();
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        l = _ref1[_j];
        if (l.end1 === this) {
          _results.push(l.end2);
        }
      }
      return _results;
    };

    return Agent;

  })();

  ABM.Agents = (function(_super) {

    __extends(Agents, _super);

    function Agents() {
      Agents.__super__.constructor.call(this);
      this.staticColors = false;
      this.useSprites = false;
    }

    Agents.prototype.setDefaultColor = function(color) {
      return ABM.Agent.prototype.color = color;
    };

    Agents.prototype.setDefaultShape = function(shape) {
      return ABM.Agent.prototype.shape = shape;
    };

    Agents.prototype.setDefaultSize = function(size) {
      return ABM.Agent.prototype.size = size;
    };

    Agents.prototype.setDefaultHeading = function(heading) {
      return ABM.Agent.prototype.heading = heading;
    };

    Agents.prototype.setDefaultHidden = function(hidden) {
      return ABM.Agent.prototype.hidden = hidden;
    };

    Agents.prototype.setDefaultSprite = function() {
      if (ABM.Agent.prototype.color != null) {
        return ABM.Agent.prototype.sprite = ABM.shapes.shapeToCtx(ABM.Agent.prototype.shape, ABM.Agent.prototype.color, ABM.Agent.prototype.size * ABM.patches.size);
      }
    };

    Agents.prototype.setDefaultPen = function(size, down) {
      if (down == null) {
        down = false;
      }
      ABM.Agent.prototype.penSize = size;
      return ABM.Agent.prototype.penDown = down;
    };

    Agents.prototype.setStaticColors = function(staticColors) {
      this.staticColors = staticColors;
    };

    Agents.prototype.setUseSprites = function(useSprites) {
      this.useSprites = useSprites;
    };

    Agents.prototype.create = function(num, init) {
      var i, _j, _results;
      if (init == null) {
        init = function() {};
      }
      _results = [];
      for (i = _j = 1; _j <= num; i = _j += 1) {
        _results.push((function(o) {
          init(o);
          return o;
        })(this.add(new ABM.Agent)));
      }
      return _results;
    };

    Agents.prototype.clear = function() {
      while (this.any()) {
        this.last().die();
      }
      return null;
    };

    Agents.prototype.breed = function(breed) {
      return this.getWithProp("breed", breed);
    };

    Agents.prototype.agentsInPatches = function(patches) {
      var array, p, _j, _len1;
      array = [];
      for (_j = 0, _len1 = patches.length; _j < _len1; _j++) {
        p = patches[_j];
        array.push.apply(array, p.agentsHere());
      }
      return this.asSet(array);
    };

    Agents.prototype.agentRect = function(a, dx, dy, meToo) {
      var rect;
      if (meToo == null) {
        meToo = false;
      }
      rect = ABM.patches.patchRect(a.p, dx, dy, true);
      rect = this.agentsInPatches(rect);
      if (!meToo) {
        u.removeItem(rect, a);
      }
      return rect;
    };

    Agents.prototype.inCone = function(a, heading, cone, radius, meToo) {
      var as;
      if (meToo == null) {
        meToo = false;
      }
      as = this.agentRect(a, radius, radius, true);
      return as.inCone(a, heading, cone, radius, meToo);
    };

    Agents.prototype.inRadius = function(a, radius, meToo) {
      var as;
      if (meToo == null) {
        meToo = false;
      }
      as = this.agentRect(a, radius, radius, true);
      return as.inRadius(a, radius, meToo);
    };

    return Agents;

  })(ABM.AgentSet);

  ABM.Link = (function() {

    Link.prototype.breed = "default";

    Link.prototype.color = [130, 130, 130];

    Link.prototype.thickness = 2;

    Link.prototype.hidden = false;

    function Link(end1, end2) {
      this.end1 = end1;
      this.end2 = end2;
      if (ABM.links.cacheAgentLinks) {
        this.end1.links.push(this);
        this.end2.links.push(this);
      }
    }

    Link.prototype.draw = function(ctx) {
      ctx.save();
      ctx.strokeStyle = u.colorStr(this.color);
      ctx.lineWidth = ABM.patches.bits2Patches(this.thickness);
      ctx.beginPath();
      if (!ABM.patches.isTorus) {
        ctx.moveTo(this.end1.x, this.end1.y);
        ctx.lineTo(this.end2.x, this.end2.y);
      } else {
        pt = this.end1.torusPt(this.end2);
        ctx.moveTo(this.end1.x, this.end1.y);
        ctx.lineTo.apply(ctx, pt);
        if (pt[0] !== this.end2.x || pt[1] !== this.end2.y) {
          pt = this.end2.torusPt(this.end1);
          ctx.moveTo(this.end2.x, this.end2.y);
          ctx.lineTo.apply(ctx, pt);
        }
      }
      ctx.closePath();
      ctx.stroke();
      return ctx.restore();
    };

    Link.prototype.die = function() {
      ABM.links.remove(this);
      if (this.end1.links != null) {
        u.removeItem(this.end1.links, this);
      }
      if (this.end2.links != null) {
        return u.removeItem(this.end2.links, this);
      }
    };

    Link.prototype.bothEnds = function() {
      return [this.end1, this.end2];
    };

    Link.prototype.length = function() {
      return this.end1.distance(this.end2);
    };

    Link.prototype.otherEnd = function(a) {
      if (this.end1 === a) {
        return this.end2;
      } else {
        return this.end1;
      }
    };

    return Link;

  })();

  ABM.Links = (function(_super) {

    __extends(Links, _super);

    function Links() {
      Links.__super__.constructor.call(this);
      this.cacheAgentLinks = false;
    }

    Links.prototype.setDefaultColor = function(color) {
      return ABM.Link.prototype.color = color;
    };

    Links.prototype.setDefaultThickness = function(thickness) {
      return ABM.Link.prototype.thickness = thickness;
    };

    Links.prototype.setDefaultHidden = function(hidden) {
      return ABM.Link.prototype.hidden = hidden;
    };

    Links.prototype.create = function(from, to, init) {
      var a, _j, _len1, _results;
      if (init == null) {
        init = function() {};
      }
      if (to.length == null) {
        to = [to];
      }
      _results = [];
      for (_j = 0, _len1 = to.length; _j < _len1; _j++) {
        a = to[_j];
        _results.push((function(o) {
          init(o);
          return o;
        })(this.add(new ABM.Link(from, a))));
      }
      return _results;
    };

    Links.prototype.clear = function() {
      while (this.any()) {
        this.last().die();
      }
      return null;
    };

    Links.prototype.breed = function(breed) {
      return this.getWithProp("breed", breed);
    };

    Links.prototype.allEnds = function() {
      var l, n, _j, _len1;
      n = this.asSet([]);
      for (_j = 0, _len1 = this.length; _j < _len1; _j++) {
        l = this[_j];
        n.push(l.end1, l.end2);
      }
      return n;
    };

    Links.prototype.nodes = function() {
      return this.allEnds().sortById().uniq();
    };

    Links.prototype.layoutCircle = function(list, radius, startAngle, direction) {
      var a, dTheta, i, _j, _len1;
      if (startAngle == null) {
        startAngle = Math.PI / 2;
      }
      if (direction == null) {
        direction = -1;
      }
      dTheta = 2 * Math.PI / list.length;
      for (i = _j = 0, _len1 = list.length; _j < _len1; i = ++_j) {
        a = list[i];
        a.setXY(0, 0);
        a.heading = startAngle + direction * dTheta * i;
        a.forward(radius);
      }
      return null;
    };

    return Links;

  })(ABM.AgentSet);

  u = ABM.util;

  ABM.Model = (function() {

    function Model(div, size, minX, maxX, minY, maxY, torus, neighbors) {
      var a, ctx, i, k, layers, v, _j, _k, _len1, _len2, _ref1, _ref2;
      if (torus == null) {
        torus = true;
      }
      if (neighbors == null) {
        neighbors = true;
      }
      this.animate = __bind(this.animate, this);

      this.run = __bind(this.run, this);

      ABM.model = this;
      layers = (function() {
        var _j, _results;
        _results = [];
        for (i = _j = 0; _j <= 4; i = ++_j) {
          _results.push(u.createLayer(div, size * (maxX - minX + 1), size * (maxY - minY + 1), i, "2d"));
        }
        return _results;
      })();
      this.drawing = ABM.drawing = layers[1];
      for (_j = 0, _len1 = layers.length; _j < _len1; _j++) {
        ctx = layers[_j];
        ctx.save();
        ctx.scale(size, -size);
        ctx.translate(-(minX - .5), -(maxY + .5));
      }
      this.contexts = ABM.contexts = {
        patches: layers[0],
        drawing: layers[1],
        links: layers[2],
        agents: layers[3],
        spotlight: layers[4]
      };
      _ref1 = this.contexts;
      for (k in _ref1) {
        v = _ref1[k];
        v.agentSetName = k;
      }
      this.patches = ABM.patches = new ABM.Patches(size, minX, maxX, minY, maxY, torus, neighbors);
      this.agents = ABM.agents = new ABM.Agents;
      this.links = ABM.links = new ABM.Links;
      ABM.model.contexts.spotlight.globalCompositeOperation = "xor";
      this.showFPS = true;
      this.ticks = 1;
      this.refreshLinks = this.refreshAgents = this.refreshPatches = true;
      this.fastPatches = false;
      this.stepFrequency = 1000 / 60;
      this.setup();
      this.animStop = true;
      if (this.agents.useSprites) {
        if (ABM.Agent.prototype.color != null) {
          this.agents.setDefaultSprite();
        }
        _ref2 = this.agents;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          a = _ref2[_k];
          if (!a.hasOwnProperty("sprite")) {
            if (a.hasOwnProperty("color" || a.hasOwnProperty("shape" || a.hasOwnProperty("size")))) {
              a.sprite = ABM.shapes.shapeToCtx(a.shape, a.color, a.size * this.patches.size);
            }
          }
        }
      }
    }

    Model.prototype.setFastPatches = function() {
      var ctx;
      ctx = this.contexts.patches;
      ctx.imageSmoothingEnabled = false;
      ctx.mozImageSmoothingEnabled = false;
      ctx.webkitImageSmoothingEnabled = false;
      ctx.save();
      ctx.setTransform(1, 0, 0, 1, 0, 0);
      return this.patches.drawWithPixels = true;
    };

    Model.prototype.setAgentsUseSprites = function() {
      return this.agents.setUseSprites(true);
    };

    Model.prototype.setCacheAgentsHere = function() {
      var a, p, _j, _k, _len1, _len2, _ref1, _ref2, _results;
      _ref1 = this.patches;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        p = _ref1[_j];
        p.agents = [];
      }
      _ref2 = this.agents;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        a = _ref2[_k];
        _results.push(a.p.agents.push(a));
      }
      return _results;
    };

    Model.prototype.setCacheMyLinks = function() {
      var a, l, _j, _k, _len1, _len2, _ref1, _ref2, _results;
      this.links.cacheAgentLinks = true;
      _ref1 = this.agents;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        a = _ref1[_j];
        a.links = [];
      }
      _ref2 = this.links;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        l = _ref2[_k];
        _results.push((l.end1.links.push(l), l.end2.links.push(l)));
      }
      return _results;
    };

    Model.prototype.setCachePatchRects = function(radius, meToo) {
      var p, _j, _len1, _ref1, _results;
      if (meToo == null) {
        meToo = false;
      }
      _ref1 = this.patches;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        p = _ref1[_j];
        p.pRect = this.patches.patchRect(p, radius, radius, meToo);
        p.pRect.radius = radius;
        _results.push(p.pRect.meToo = meToo);
      }
      return _results;
    };

    Model.prototype.setAgentStaticColors = function() {
      return this.agents.setStaticColors(true);
    };

    Model.prototype.setStepFrequency = function(f) {
      return this.stepFrequency = 1000 / f;
    };

    Model.prototype.agentSetName = function(aset) {
      return aset.constructor.name.toLowerCase();
    };

    Model.prototype.setTextParams = function(agentSetName, domFont, align, baseline) {
      if (align == null) {
        align = "center";
      }
      if (baseline == null) {
        baseline = "middle";
      }
      if (typeof agentSetName !== "string") {
        agentSetName = this.agentSetName(agentSetName);
      }
      return u.ctxTextParams(this.contexts[agentSetName], domFont, align, baseline);
    };

    Model.prototype.setLabelParams = function(agentSetName, color, xy) {
      if (typeof agentSetName !== "string") {
        agentSetName = this.agentSetName(agentSetName);
      }
      return u.ctxLabelParams(this.contexts[agentSetName], color, xy);
    };

    Model.prototype.setup = function() {};

    Model.prototype.step = function() {};

    Model.prototype.startup = function() {};

    Model.prototype.start = function() {
      if (!this.animStop) {
        return;
      }
      if (this.ticks === 1) {
        this.startup();
        this.draw();
      }
      this.startMS = Date.now();
      this.startTick = this.ticks;
      this.animStop = false;
      this.run();
      return this.animate();
    };

    Model.prototype.stop = function() {
      return this.animStop = true;
    };

    Model.prototype.run = function() {
      this.step();
      this.tick();
      if (!this.animStop) {
        return setTimeout(this.run, this.stepFrequency);
      }
    };

    Model.prototype.draw = function() {
      if (this.refreshPatches || this.ticks === 1) {
        this.patches.draw(this.contexts.patches);
      }
      if (this.refreshLinks || this.ticks === 1) {
        this.links.draw(this.contexts.links);
      }
      if (this.refreshAgents || this.ticks === 1) {
        this.agents.draw(this.contexts.agents);
      }
      if (this.spotlightAgent != null) {
        return this.drawSpotlight();
      }
    };

    Model.prototype.animate = function() {
      this.draw();
      if (!this.animStop) {
        return requestAnimFrame(this.animate);
      }
    };

    Model.prototype.tick = function() {
      var animTicks, fps;
      animTicks = this.ticks - this.startTick;
      if (this.showFPS && (animTicks % 100) === 0 && animTicks !== 0) {
        fps = Math.round(animTicks * 1000 / (Date.now() - this.startMS));
        console.log("fps: " + fps + " at " + animTicks + " ticks");
      }
      return this.ticks++;
    };

    Model.prototype.setSpotlight = function(agent) {
      var agentSet;
      if (typeof agent === "string") {
        agentSet = this[agent]();
        if (!!agentSet.any()) {
          return this.spotlightAgent = agentSet.oneOf();
        }
      } else {
        return this.spotlightAgent = agent;
      }
    };

    Model.prototype.removeSpotlight = function() {
      this.spotlightAgent = null;
      return u.clearCtx(this.contexts.spotlight);
    };

    Model.prototype.drawSpotlight = function() {
      var agent, ctx;
      agent = this.spotlightAgent;
      ctx = this.contexts.spotlight;
      if (!agent) {
        return;
      }
      u.clearCtx(ctx);
      if (!~this.agents.indexOf(agent)) {
        this.spotlightAgent = null;
        return;
      }
      u.fillCtx(ctx, [0, 0, 0, 0.6]);
      ctx.beginPath();
      ctx.arc(agent.x, agent.y, 3, 0, 2 * Math.PI, false);
      return ctx.fill();
    };

    Model.prototype.linkBreeds = function(s) {
      var b, _j, _len1, _ref1,
        _this = this;
      _ref1 = s.split(" ");
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        b = _ref1[_j];
        this[b] = (function(b) {
          return function() {
            return this.links.breed(b);
          };
        })(b);
      }
      return null;
    };

    Model.prototype.agentBreeds = function(s) {
      var b, _j, _len1, _ref1,
        _this = this;
      _ref1 = s.split(" ");
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        b = _ref1[_j];
        this[b] = (function(b) {
          return function() {
            return this.agents.breed(b);
          };
        })(b);
      }
      return null;
    };

    Model.prototype.asSet = function(a) {
      return ABM.AgentSet.asSet(a);
    };

    Model.prototype.setRootVars = function() {
      ABM.root.ps = this.patches;
      ABM.root.p0 = this.patches[0];
      ABM.root.as = this.agents;
      ABM.root.a0 = this.agents[0];
      ABM.root.ls = this.links;
      ABM.root.l0 = this.links[0];
      ABM.root.dr = this.drawing;
      ABM.root.u = ABM.util;
      ABM.root.app = this;
      ABM.root.cx = this.contexts;
      ABM.root.cl = function(o) {
        return console.log(o);
      };
      ABM.root.cla = function(array) {
        var a, _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = array.length; _j < _len1; _j++) {
          a = array[_j];
          _results.push(console.log(a));
        }
        return _results;
      };
      return null;
    };

    return Model;

  })();

}).call(this);
